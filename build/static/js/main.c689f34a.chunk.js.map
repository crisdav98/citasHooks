{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Cita","cita","index","eliminarCita","className","mascota","propietario","fecha","hora","sintomas","onClick","type","Formulario","crearCita","stateInicial","useState","actualizarCita","actualizarState","e","target","name","value","onSubmit","preventDefault","console","log","placeholder","onChange","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCita","nuevasCitas","splice","useEffect","setItem","stringify","titulo","Object","keys","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6MAGA,SAASA,EAAT,GAA4C,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,aACxB,OACE,yBAAKC,UAAU,QACb,uCAAY,8BAAOH,EAAKI,SAAxB,KACA,wCAAU,8BAAOJ,EAAKK,aAAtB,KACA,qCAAU,8BAAOL,EAAKM,OAAtB,KACA,oCAAS,8BAAON,EAAKO,MAArB,KACA,wCAAa,8BAAOP,EAAKQ,UAAzB,KACA,4BACEC,QAAS,kBAAMP,EAAaD,IAC5BS,KAAK,SAASP,UAAU,gCAF1B,eAOR,SAASQ,EAAT,GAAkC,IAAbC,EAAY,EAAZA,UAEbC,EAAe,CACnBT,QAAU,GACVC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,SAAU,IAPmB,EAYAM,mBAASD,GAZT,mBAYxBb,EAZwB,KAYlBe,EAZkB,KAezBC,EAAkB,SAAAC,GACtBF,EAAe,eACVf,EADS,eAEXiB,EAAEC,OAAOC,KAAQF,EAAEC,OAAOE,UAkB/B,OACI,kBAAC,WAAD,KACE,0CACA,0BAAMC,SAhBO,SAAAJ,GACjBA,EAAEK,iBAEFC,QAAQC,IAAIxB,GAGZY,EAAUZ,GAGVe,EAAeF,KAQH,iDACA,2BACEH,KAAK,OACLS,KAAK,UACLhB,UAAU,eACVsB,YAAY,iBACZC,SAAUV,EACVI,MAAOpB,EAAKI,UAGd,kDACA,2BACEM,KAAK,OACLS,KAAK,cACLhB,UAAU,eACVsB,YAAY,gCACZC,SAAUV,EACVI,MAAOpB,EAAKK,cAGd,wCACA,2BACEK,KAAK,OACLP,UAAU,eACVgB,KAAK,QACLO,SAAUV,EACVI,MAAOpB,EAAKM,QAGd,uCACA,2BACEI,KAAK,OACLP,UAAU,eACVgB,KAAK,OACLO,SAAUV,EACVI,MAAOpB,EAAKO,OAGd,2CACA,8BACEJ,UAAU,eACVgB,KAAK,WACLO,SAAUV,EACVI,MAAOpB,EAAKQ,WAGd,4BAAQE,KAAK,SAASP,UAAU,+BAAhC,aA4EDwB,MArEf,WAGE,IAAIC,EAAiBC,KAAKC,MAAMC,aAAaC,QAAQ,UAEjDJ,IACFA,EAAiB,IANN,MAYgBd,mBAASc,GAZzB,mBAYNK,EAZM,KAYCC,EAZD,KAuBPhC,EAAe,SAAAD,GACnB,IAAMkC,EAAW,YAAOF,GACxBE,EAAYC,OAAOnC,EAAO,GAC1BiC,EAAYC,IAGdE,qBACE,WACyBR,KAAKC,MAAMC,aAAaC,QAAQ,UAEnDD,aAAaO,QAAQ,QAAST,KAAKU,UAAUN,IAE7CF,aAAaO,QAAQ,QAAST,KAAKU,UAAU,OAEhD,CAACN,IAGN,IAAMO,EAAuC,IAA9BC,OAAOC,KAAKT,GAAOU,OAAe,eAAiB,gCAElE,OACI,kBAAC,WAAD,KACE,0DACA,yBAAKxC,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBACX,kBAACQ,EAAD,CACEC,UAlCF,SAAAZ,GAEhB,IAAMmC,EAAW,sBAAOF,GAAP,CAAcjC,IAG/BkC,EAAYC,OAgCA,yBAAKhC,UAAU,mBACb,4BAAKqC,GACJP,EAAMW,KAAI,SAAC5C,EAAMC,GAAP,OACP,kBAACF,EAAD,CACE8C,IAAK5C,EACLA,MAAOA,EACPD,KAAMA,EACNE,aAAcA,YC9JlB4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c689f34a.chunk.js","sourcesContent":["import React, { useState, useEffect,  Fragment } from 'react';\n\n\nfunction Cita({cita, index, eliminarCita}) {\n    return(\n      <div className=\"cita\">\n        <p>Mascota: <span>{cita.mascota}</span> </p>\n        <p>Dueño: <span>{cita.propietario}</span> </p>\n        <p>Fecha: <span>{cita.fecha}</span> </p>\n        <p>Hora: <span>{cita.hora}</span> </p>\n        <p>Sintomas: <span>{cita.sintomas}</span> </p>\n        <button \n          onClick={() => eliminarCita(index)}\n          type=\"button\" className=\"button eliminar u-full-width\">Eliminar X</button>\n      </div>\n    )\n}\n\nfunction Formulario({crearCita}) {\n\n  const stateInicial = {\n    mascota : '',\n    propietario: '',\n    fecha: '',\n    hora: '',\n    sintomas: ''\n  }\n\n  // cita = state actual\n  // actualizarCita = fn para cambiar el state\n  const [cita, actualizarCita] = useState(stateInicial);\n\n  // actualiza el state\n  const actualizarState = e => {\n    actualizarCita({\n      ...cita, \n      [e.target.name] : e.target.value\n    })\n  }\n\n  // pasamos la cita al componente principal\n  const enviarCita = e => {\n    e.preventDefault();\n\n    console.log(cita);\n\n    // pasar la cita hacia el componente principal\n    crearCita(cita)\n\n    // Reiniciar el state (reiniciar el form)\n    actualizarCita(stateInicial)\n  }\n\n\n  return (\n      <Fragment>\n        <h2>Crear Cita</h2>\n        <form onSubmit={enviarCita}>\n                <label>Nombre Mascota</label>\n                <input \n                  type=\"text\" \n                  name=\"mascota\"\n                  className=\"u-full-width\" \n                  placeholder=\"Nombre Mascota\" \n                  onChange={actualizarState}\n                  value={cita.mascota}\n                />\n\n                <label>Nombre Dueño</label>\n                <input \n                  type=\"text\" \n                  name=\"propietario\"\n                  className=\"u-full-width\"  \n                  placeholder=\"Nombre Dueño de la Mascota\" \n                  onChange={actualizarState}\n                  value={cita.propietario}\n                />\n\n                <label>Fecha</label>\n                <input \n                  type=\"date\" \n                  className=\"u-full-width\"\n                  name=\"fecha\"\n                  onChange={actualizarState}\n                  value={cita.fecha}\n                />               \n\n                <label>Hora</label>\n                <input \n                  type=\"time\" \n                  className=\"u-full-width\"\n                  name=\"hora\" \n                  onChange={actualizarState}\n                  value={cita.hora}\n                />\n\n                <label>Sintomas</label>\n                <textarea \n                  className=\"u-full-width\"\n                  name=\"sintomas\"\n                  onChange={actualizarState}\n                  value={cita.sintomas}\n                ></textarea>\n\n                <button type=\"submit\" className=\"button-primary u-full-width\">Agregar</button>\n            </form>\n      </Fragment>\n  )\n  \n}\n\nfunction App() {\n\n  // cargar las citas de localstorage como state inicial\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n\n  if(!citasIniciales) {\n    citasIniciales = [];\n  }\n\n  // useState retorna 2 funciones\n  // El state actual = this.state;\n  // Función que actualiza el state this.setState();\n  const [citas, guardarCita] = useState(citasIniciales);\n\n  // Agregar las nuevas citas al state\n  const crearCita = cita => {\n    // Tomar una copia del state y agregar el nuevo cliente\n    const nuevasCitas = [...citas, cita];\n\n    // almacenamos en el state\n    guardarCita(nuevasCitas);\n  }\n  // Elimina las Citas del State\n  const eliminarCita = index => {\n    const nuevasCitas = [...citas];\n    nuevasCitas.splice(index, 1);\n    guardarCita(nuevasCitas);\n  }\n\n  useEffect(\n    () => {\n        let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n        if(citasIniciales) {\n          localStorage.setItem('citas', JSON.stringify(citas));\n        } else {\n          localStorage.setItem('citas', JSON.stringify([]));\n        }\n    }, [citas] )\n\n  // Cargar Condicionalmente un Titulo\n  const titulo = Object.keys(citas).length === 0 ? 'No Hay Citas' : 'Administrar Las Citas Aquí';\n\n  return(\n      <Fragment>\n        <h1>Administrador de Pacientes</h1>\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"one-half column\">\n                    <Formulario \n                      crearCita={crearCita}\n                    />\n                </div>\n                <div className=\"one-half column\">\n                  <h2>{titulo}</h2>\n                  {citas.map((cita, index ) => (\n                      <Cita \n                        key={index}\n                        index={index}\n                        cita={cita}\n                        eliminarCita={eliminarCita}\n                      />\n                  ))}\n                </div>\n            </div>\n        </div>\n      </Fragment>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}